{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Huahin-unit","google":"UA-32923864-1","tagline":"Huahin Unit is a unit test driver for Huahin MapReduce programs for use with JUnit and MRUnit.","body":"## Huahin Unit\r\nHuahin Unit is a unit test driver for Huahin MapReduce programs for use with JUnit and MRUnit.\r\n\r\nWriting Huahin Unit Test cases\r\n\r\nHuahin Unit testing framework is based on Junit and MRUnit and it can test\r\nMapReduce programs written on 0.20.x, 0.22.x, 1.0.x version of Hadoop\r\n\r\n## Releases\r\ncurrent version is 0.1.4.\r\n\r\n#### 15 Nov, 2012: Release 0.1.4 available\r\n* Supported Big Join. Use the SimpleJoin For data to fit into memory, if the data does not fit, use the BigJoin.\r\n\r\n#### 12 Sep, 2012: Release 0.1.3 available\r\n* add: meta data setting.\r\n* supported input data separator regex.\r\n\r\n#### 20 Aug, 2012: Release 0.1.2 available\r\n* add: Easily supports the Join. However, you must be a size master data appear in the memory of the task.\r\n\r\n#### 30 July, 2012: Release 0.1.1 available\r\n* update: supports the huahin-core 0.1.1\r\n\r\n#### 28 Jun, 2012: Release 0.1.0 available\r\nThis is the first version.\r\n\r\n### Install\r\nGets the jar using maven.\r\n```\r\n<dependency>\r\n  <groupId>org.huahinframework</groupId>\r\n  <artifactId>huahin-unit</artifactId>\r\n  <version>x.x.x</version>\r\n</dependency>\r\n```\r\n\r\nOr, get the source code.\r\n```\r\ngit clone git://github.com/huahin/huahin-unit.git\r\n```\r\n\r\n### Test\r\nAll of Huahin Unit test run using the run method.\r\n\r\nTo test the Filter will inherit the FilterDriver. Set the Filter you want to test getFilter.\r\nParameters of the run is data that is used to input data and output.\r\n\r\nThe following example is Filter to get a tab delimited data.\r\nAnd in the next test is to output the Record.\r\n\r\n\r\n```\r\npublic class TestFilter extends Filter {\r\n  @Override\r\n  public void filter(Record record, Writer writer)\r\n      throws IOException, InterruptedException {\r\n    Record emitRecord = new Record();\r\n    emitRecord.addGrouping(\"label\", record.getValueString(\"label\"));\r\n    emitRecord.addValue(\"value\", record.getValueString(\"value\"));\r\n    writer.write(emitRecord);\r\n  }\r\n  ...\r\n}\r\n\r\npublic class FilterTest extends FilterDriver {\r\n  private static final String LABELS = new String[] { \"label\", \"value\" };\r\n  // first time filter test\r\n  public void testString() {\r\n     String input = \"label\\t1\";\r\n\r\n     Record output = new Record();\r\n     output.addGrouping(\"label\", \"label\");\r\n     output.addValue(\"value\", 1);\r\n\r\n     run(LABELS, \"\\t\", false, input, Arrays.asList(output));\r\n  }\r\n\r\n  // any time filter test\r\n  public void testRecord() {\r\n    Record input = new Record();\r\n    input.addValue(\"label\", \"label\");\r\n    input.addValue(\"value\", 1);\r\n\r\n    Record output = new Record();\r\n    output.addGrouping(\"label\", \"label\");\r\n    output.addValue(\"value\", 1);\r\n\r\n    run(input, Arrays.asList(output));\r\n  }\r\n\r\n  @Override\r\n  public Filter getFilter() {\r\n    return new TestFilter();\r\n  }\r\n}\r\n```\r\n\r\n\r\nTo test the Summarizer will inherit the SummarizerDriver. Set the Summarizer you want to test getSummarizer.\r\nParameters of the run is data that is used to input data and output.\r\nThe following Summarizer test is count the number of labels.\r\n\r\n```\r\npublic class TestSummarizer extends Summarizer {\r\n  private int count;\r\n  @Override\r\n  public void init() {\r\n    count = 0;\r\n  }\r\n\r\n  @Override\r\n  public boolean summarizer(Record record, Writer writer)\r\n      throws IOException, InterruptedException {\r\n    count += record.getValueInteger(LABEL_VALUE);\r\n    return false;\r\n  }\r\n\r\n  @Override\r\n  public void end(Record record, Writer writer)\r\n      throws IOException, InterruptedException {\r\n    Record emitRecord = new Record();\r\n    emitRecord.addValue(LABEL_VALUE, count);\r\n    writer.write(emitRecord);\r\n  }\r\n}\r\n\r\npublic class SummarizerTest extends SummarizerDriver {\r\n  public void test() {\r\n    Record input1 = new Record();\r\n    input1.addValue(\"label\", \"label\");\r\n    input1.addValue(\"value\", 1);\r\n\r\n    Record input2 = new Record();\r\n    input2.addValue(\"label\", \"label\");\r\n    input2.addValue(\"value\", 1);\r\n\r\n    Record output = new Record();\r\n    output.addGrouping(\"label\", \"label\");\r\n    output.addValue(\"value\", 2);\r\n\r\n    run(Arrays.asList(input1, input2), Arrays.asList(output));\r\n  }\r\n\r\n  public Summarizer getSummarizer() {\r\n    return new TestSummarizer();\r\n  }\r\n}\r\n```\r\n\r\n\r\nTo test the Job will inherit the JobDriver.\r\nHow to use the test is the same as that inherits Tool SimpleJobTool, to run will only use the run method.\r\nParameters of the run is data that is used to input data and output.\r\nAnd the last parameter is whether to output the results actually executed.\r\n\r\n```\r\npublic class JobTest extends JobDriver {\r\n  private static final String LABELS = new String[] { \"label\", \"value\" };\r\n  public void test()\r\n    throws IOException, InstantiationException,\r\n           IllegalAccessException, ClassNotFoundException {\r\n    addJob(LABELS, StringUtil.TAB, false).setFilter(TestFilter.class)\r\n                                         .setSummarizer(TestSummarizer.class);\r\n\r\n    List<String> input = new ArrayList<String>();\r\n    input.add(\"label\\t1\");\r\n    input.add(\"label\\t2\");\r\n    input.add(\"label\\t3\");\r\n\r\n    List<Record> output = new ArrayList<Record>();\r\n    Record record = new Record();\r\n    record.addGrouping(\"label\", \"label\");\r\n    record.addValue(\"value\", 6);\r\n    output.add(record);\r\n\r\n    run(input, output, true);\r\n  }\r\n}\r\n```\r\n\r\n### Support or Contact\r\nContact huahin-framework@googlegroups.com and weâ€™ll help you sort it out."}